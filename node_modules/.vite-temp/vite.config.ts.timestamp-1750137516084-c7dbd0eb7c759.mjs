var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/services/logger.js
import pino from "file:///home/d/cliprr/cliparr-node/node_modules/pino/pino.js";
var isProd, logger;
var init_logger = __esm({
  "src/services/logger.js"() {
    "use strict";
    isProd = process.env.NODE_ENV === "production";
    logger = pino({
      level: process.env.LOG_LEVEL || (isProd ? "info" : "debug"),
      // in prod we emit raw JSON so log aggregators can parse it;
      // in dev we pretty-print for the console
      transport: isProd ? void 0 : {
        target: "pino-pretty",
        options: {
          colorize: true,
          levelFirst: true,
          translateTime: "SYS:standard",
          ignore: "pid,hostname"
        }
      },
      // automatically serialize Errors (so you get stack traces, etc.)
      serializers: {
        ...pino.stdSerializers,
        err: pino.stdSerializers.err
      },
      // redact any sensitive fields by default
      redact: {
        paths: ["req.headers.authorization", "password"],
        remove: true
      }
    });
  }
});

// src/config/index.js
import path from "path";
import dotenv from "file:///home/d/cliprr/cliparr-node/node_modules/dotenv/lib/main.js";
var __vite_injected_original_dirname, isProd2, config, config_default;
var init_config = __esm({
  "src/config/index.js"() {
    "use strict";
    __vite_injected_original_dirname = "/home/d/cliprr/cliparr-node/src/config";
    dotenv.config();
    isProd2 = process.env.NODE_ENV === "production";
    config = {
      env: process.env.NODE_ENV || "development",
      host: process.env.HOST || "0.0.0.0",
      port: +(process.env.PORT || 8485),
      // Sonarr
      sonarr: {
        apiKey: process.env.SONARR_API_KEY,
        url: process.env.SONARR_URL || "http://localhost:8989"
      },
      // Database
      db: {
        path: process.env.DB_PATH || path.join(__vite_injected_original_dirname, "..", "database", "data", "cliparr.db")
      },
      // WebSocket
      ws: {
        path: process.env.WS_PATH || "/ws",
        heartbeat: +(process.env.WS_PING_MS || 3e4)
      },
      // CORS (used in your cors middleware)
      cors: {
        origin: isProd2 ? process.env.FRONTEND_URL || "https://cliprr.example.com" : "http://localhost:8484",
        methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        allowedHeaders: ["Content-Type", "Authorization"],
        credentials: true
      }
    };
    if (!config.sonarr.apiKey) {
      throw new Error("Missing ENV var: SONARR_API_KEY");
    }
    config_default = config;
  }
});

// src/config/app.js
var devConfig, prodConfig, isProduction, config2, app_default;
var init_app = __esm({
  "src/config/app.js"() {
    "use strict";
    init_logger();
    devConfig = {
      cors: {
        origin: "http://localhost:8484",
        methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        headers: ["Content-Type", "Authorization"],
        credentials: true
      }
    };
    prodConfig = {
      cors: {
        origin: "https://cliprr.example.com",
        // This will be updated for production
        methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        headers: ["Content-Type", "Authorization"],
        credentials: true
      }
    };
    isProduction = process.env.NODE_ENV === "production";
    config2 = isProduction ? prodConfig : devConfig;
    logger.info(`Using ${isProduction ? "production" : "development"} configuration`);
    app_default = config2;
  }
});

// src/middleware/cors.js
function cors(req, res, next) {
  const { cors: corsConfig } = app_default;
  res.header("Access-Control-Allow-Origin", corsConfig.origin);
  res.header("Access-Control-Allow-Methods", corsConfig.methods.join(","));
  res.header("Access-Control-Allow-Headers", corsConfig.headers.join(","));
  res.header("Access-Control-Allow-Credentials", corsConfig.credentials.toString());
  if (req.method === "OPTIONS") {
    return res.sendStatus(200);
  }
  next();
}
var init_cors = __esm({
  "src/middleware/cors.js"() {
    "use strict";
    init_app();
  }
});

// src/routes/health.js
import express from "file:///home/d/cliprr/cliparr-node/node_modules/express/index.js";
var router, health_default;
var init_health = __esm({
  "src/routes/health.js"() {
    "use strict";
    router = express.Router();
    router.get("/status", (req, res) => {
      const logger2 = req.app.get("logger");
      logger2.info("Health check requested");
      res.json({
        status: "healthy",
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        database: "connected",
        server: "integrated-backend"
      });
    });
    router.get("/db-test", (req, res) => {
      const db = req.app.get("db");
      const logger2 = req.app.get("logger");
      try {
        const testResult = db.transaction(() => {
          db.prepare("INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)").run("test_key", "test_value");
          const result = db.prepare("SELECT value FROM settings WHERE key = ?").get("test_key");
          return {
            success: true,
            message: "Database test successful",
            testValue: result?.value,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          };
        })();
        res.json(testResult);
      } catch (error) {
        logger2.error("Database test failed:", error);
        res.status(500).json({
          success: false,
          message: "Database test failed",
          error: error.message
        });
      }
    });
    health_default = router;
  }
});

// src/routes/shows.js
import express2 from "file:///home/d/cliprr/cliparr-node/node_modules/express/index.js";
var router2, shows_default;
var init_shows = __esm({
  "src/routes/shows.js"() {
    "use strict";
    router2 = express2.Router();
    router2.get("/", (req, res) => {
      const db = req.app.get("db");
      const logger2 = req.app.get("logger");
      try {
        logger2.info("Fetching all shows (no pagination)");
        const query = `
      SELECT 
        s.id, 
        s.title, 
        s.path, 
        s.sonarr_id,
        s.status,
        s.overview,
        s.added_at,
        COUNT(DISTINCT e.id) as episode_count
      FROM shows s
      LEFT JOIN seasons se ON se.show_id = s.id
      LEFT JOIN episodes e ON e.season_id = se.id
      GROUP BY s.id, s.title, s.path, s.sonarr_id, s.status, s.overview, s.added_at
      ORDER BY s.title
    `;
        const shows = db.prepare(query).all();
        const total = shows.length;
        logger2.info(`Found ${shows.length} shows in local database`);
        res.json({
          shows,
          total
        });
      } catch (error) {
        logger2.error("Failed to fetch shows:", error);
        res.status(500).json({
          error: "Failed to fetch shows",
          message: error.message
        });
      }
    });
    router2.post("/", (req, res) => {
      const db = req.app.get("db");
      const logger2 = req.app.get("logger");
      try {
        const { title, path: showPath, overview, sonarr_id, status } = req.body;
        logger2.info(`Creating show: ${title}`);
        const insertStmt = db.prepare(`
      INSERT INTO shows (title, path, overview, sonarr_id, status)
      VALUES (?, ?, ?, ?, ?)
    `);
        const result = insertStmt.run(title, showPath, overview, sonarr_id, status);
        logger2.info(`Show created with ID: ${result.lastInsertRowid}`);
        res.json({
          success: true,
          id: result.lastInsertRowid,
          message: "Show created successfully"
        });
      } catch (error) {
        logger2.error("Failed to create show:", error);
        res.status(500).json({
          error: "Failed to create show",
          message: error.message
        });
      }
    });
    router2.get("/:id", (req, res) => {
      const db = req.app.get("db");
      const logger2 = req.app.get("logger");
      try {
        const showId = parseInt(req.params.id);
        if (isNaN(showId)) {
          return res.status(400).json({ error: "Invalid show ID" });
        }
        const query = `
      SELECT 
        s.id, 
        s.title, 
        s.path, 
        s.sonarr_id,
        s.status,
        s.overview,
        s.added_at
      FROM shows s
      WHERE s.id = ?
    `;
        const show = db.prepare(query).get(showId);
        if (!show) {
          return res.status(404).json({ error: "Show not found" });
        }
        logger2.info(`Retrieved show: ${show.title}`);
        res.json(show);
      } catch (error) {
        logger2.error("Failed to fetch show:", error);
        res.status(500).json({
          error: "Failed to fetch show",
          message: error.message
        });
      }
    });
    router2.put("/:id", (req, res) => {
      const db = req.app.get("db");
      const logger2 = req.app.get("logger");
      try {
        const showId = parseInt(req.params.id);
        const { title, path: showPath, overview, sonarr_id, status } = req.body;
        if (isNaN(showId)) {
          return res.status(400).json({ error: "Invalid show ID" });
        }
        const updateStmt = db.prepare(`
      UPDATE shows 
      SET title = ?, path = ?, overview = ?, sonarr_id = ?, status = ?
      WHERE id = ?
    `);
        const result = updateStmt.run(title, showPath, overview, sonarr_id, status, showId);
        if (result.changes === 0) {
          return res.status(404).json({ error: "Show not found" });
        }
        logger2.info(`Updated show ID: ${showId}`);
        res.json({
          success: true,
          message: "Show updated successfully"
        });
      } catch (error) {
        logger2.error("Failed to update show:", error);
        res.status(500).json({
          error: "Failed to update show",
          message: error.message
        });
      }
    });
    router2.delete("/:id", (req, res) => {
      const db = req.app.get("db");
      const logger2 = req.app.get("logger");
      try {
        const showId = parseInt(req.params.id);
        if (isNaN(showId)) {
          return res.status(400).json({ error: "Invalid show ID" });
        }
        const deleteStmt = db.prepare("DELETE FROM shows WHERE id = ?");
        const result = deleteStmt.run(showId);
        if (result.changes === 0) {
          return res.status(404).json({ error: "Show not found" });
        }
        logger2.info(`Deleted show ID: ${showId}`);
        res.json({
          success: true,
          message: "Show deleted successfully"
        });
      } catch (error) {
        logger2.error("Failed to delete show:", error);
        res.status(500).json({
          error: "Failed to delete show",
          message: error.message
        });
      }
    });
    router2.post("/delete", (req, res) => {
      const db = req.app.get("db");
      const logger2 = req.app.get("logger");
      const { ids } = req.body;
      if (!Array.isArray(ids) || ids.length === 0) {
        return res.status(400).json({ error: "ids must be a non-empty array" });
      }
      try {
        db.transaction(() => {
          const episodeRows = db.prepare(
            `SELECT e.id FROM episodes e JOIN seasons s ON e.season_id = s.id WHERE s.show_id IN (${ids.map(() => "?").join(",")})`
          ).all(...ids);
          const episodeIds = episodeRows.map((row) => row.id);
          if (episodeIds.length > 0) {
            db.prepare(`DELETE FROM episode_files WHERE episode_id IN (${episodeIds.map(() => "?").join(",")})`).run(...episodeIds);
          }
          const seasonRows = db.prepare(
            `SELECT id FROM seasons WHERE show_id IN (${ids.map(() => "?").join(",")})`
          ).all(...ids);
          const seasonIds = seasonRows.map((row) => row.id);
          if (seasonIds.length > 0) {
            db.prepare(`DELETE FROM episodes WHERE season_id IN (${seasonIds.map(() => "?").join(",")})`).run(...seasonIds);
          }
          if (ids.length > 0) {
            db.prepare(`DELETE FROM seasons WHERE show_id IN (${ids.map(() => "?").join(",")})`).run(...ids);
            db.prepare(`DELETE FROM shows WHERE id IN (${ids.map(() => "?").join(",")})`).run(...ids);
          }
        })();
        logger2.info(`Cascade deleted shows and related data for IDs: ${ids}`);
        res.json({ success: true, deleted: ids.length });
      } catch (error) {
        logger2.error("Failed to cascade delete shows:", error.message, error.stack);
        res.status(500).json({ error: "Failed to cascade delete shows", message: error.message, stack: error.stack });
      }
    });
    shows_default = router2;
  }
});

// src/routes/sonarr.js
import express3 from "file:///home/d/cliprr/cliparr-node/node_modules/express/index.js";
import axios from "file:///home/d/cliprr/cliparr-node/node_modules/axios/index.js";
import dotenv2 from "file:///home/d/cliprr/cliparr-node/node_modules/dotenv/lib/main.js";
import process2 from "process";
import WebSocket from "file:///home/d/cliprr/cliparr-node/node_modules/ws/wrapper.mjs";
async function importShowById(showId, req, wss, db) {
  try {
    logger.info(`Starting import for show ID: ${showId}`);
    wss.clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify({
          type: "import_progress",
          showId,
          status: "started",
          message: "Starting import process...",
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        }));
      }
    });
    const showResponse = await sonarrClient.get(`/api/v3/series/${showId}`);
    const show = showResponse.data;
    logger.info({ show }, "Fetched show details from Sonarr");
    wss.clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify({
          type: "import_progress",
          showId,
          status: "fetching_episodes",
          message: "Fetching episodes...",
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        }));
      }
    });
    const episodeResponse = await sonarrClient.get(`/api/v3/episode?seriesId=${showId}`);
    const episodes = episodeResponse.data;
    logger.info(
      { episodeCount: episodes.length, episodes: episodes.slice(0, 3) },
      "Fetched episodes from Sonarr (showing first 3)"
    );
    const seasons = {};
    episodes.forEach((episode) => {
      if (!seasons[episode.seasonNumber]) {
        seasons[episode.seasonNumber] = {
          seasonNumber: episode.seasonNumber,
          episodes: []
        };
      }
      seasons[episode.seasonNumber].episodes.push(episode);
    });
    logger.info({ seasonCount: Object.keys(seasons).length }, "Prepared seasons grouping");
    wss.clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify({
          type: "import_progress",
          showId,
          status: "importing",
          message: `Importing ${Object.keys(seasons).length} seasons...`,
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        }));
      }
    });
    try {
      logger.info("Beginning database transaction for import");
      db.transaction(() => {
        logger.info(
          {
            showInsert: {
              sonarr_id: show.id,
              title: show.title,
              overview: show.overview,
              path: show.path
            }
          },
          "Inserting show"
        );
        const showResult = db.prepare(`
          INSERT OR REPLACE INTO shows (
            sonarr_id, title, overview, path
          ) VALUES (?, ?, ?, ?)
        `).run(
          show.id,
          show.title,
          show.overview,
          show.path
        );
        Object.values(seasons).forEach((season) => {
          logger.info(
            {
              seasonInsert: {
                show_id: showResult.lastInsertRowid,
                season_number: season.seasonNumber
              }
            },
            "Inserting season"
          );
          const seasonResult = db.prepare(`
            INSERT OR IGNORE INTO seasons (
              show_id, season_number
            ) VALUES (?, ?)
          `).run(
            showResult.lastInsertRowid,
            season.seasonNumber
          );
          season.episodes.forEach((episode) => {
            logger.info(
              {
                episodeInsert: {
                  season_id: seasonResult.lastInsertRowid,
                  episode_number: episode.episodeNumber,
                  title: episode.title,
                  sonarr_episode_id: episode.id
                }
              },
              "Inserting episode"
            );
            db.prepare(`
              INSERT OR REPLACE INTO episodes (
                season_id, episode_number, title, sonarr_episode_id
              ) VALUES (?, ?, ?, ?)
            `).run(
              seasonResult.lastInsertRowid,
              episode.episodeNumber,
              episode.title,
              episode.id
            );
          });
        });
      })();
      logger.info("Database transaction for import completed successfully");
      wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify({
            type: "import_progress",
            showId,
            status: "completed",
            message: "Import completed successfully",
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          }));
        }
      });
      return { success: true, showId };
    } catch (txError) {
      logger.error(
        { txError: txError.stack || txError },
        "Database transaction failed during import"
      );
      wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify({
            type: "import_progress",
            showId,
            status: "error",
            message: "Import failed: " + txError.message,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          }));
        }
      });
      return { success: false, showId, error: txError.message };
    }
  } catch (error) {
    logger.error({ error: error.message }, "Failed to import show");
    return { success: false, showId, error: error.message };
  }
}
var router3, SONARR_URL, SONARR_API_KEY, sonarrClient, testSonarrConnection, sonarr_default;
var init_sonarr = __esm({
  "src/routes/sonarr.js"() {
    "use strict";
    init_logger();
    dotenv2.config();
    router3 = express3.Router();
    SONARR_URL = process2.env.SONARR_URL;
    SONARR_API_KEY = process2.env.SONARR_API_KEY;
    logger.info(`Loaded SONARR_URL from env: ${SONARR_URL}`);
    if (SONARR_API_KEY) {
      logger.info(
        `Loaded SONARR_API_KEY from env: ${SONARR_API_KEY.slice(0, 4)}... (masked)`
      );
    } else {
      logger.warn("SONARR_API_KEY is not set in environment variables!");
    }
    sonarrClient = axios.create({
      baseURL: SONARR_URL,
      timeout: 15e3,
      // 15 second timeout
      headers: {
        "X-Api-Key": SONARR_API_KEY,
        "Content-Type": "application/json"
      }
    });
    sonarrClient.interceptors.response.use(
      (response) => response,
      (error) => {
        if (error.code === "ECONNABORTED") {
          logger.error("Sonarr API request timed out");
          throw new Error(
            "Sonarr API request timed out. Please check if Sonarr is running and accessible."
          );
        }
        if (error.response) {
          if (error.response.status === 401) {
            logger.error("Invalid Sonarr API key");
            throw new Error(
              "Invalid Sonarr API key. Please check your SONARR_API_KEY environment variable."
            );
          }
          logger.error(
            {
              status: error.response.status,
              data: error.response.data
            },
            "Sonarr API error response"
          );
          throw new Error(
            "Sonarr API error: " + error.response.status + " - " + JSON.stringify(error.response.data)
          );
        }
        if (error.request) {
          logger.error("No response received from Sonarr API");
          throw new Error(
            "No response from Sonarr API at " + SONARR_URL + ". Please check if Sonarr is running and accessible."
          );
        }
        logger.error({ error: error.message }, "Sonarr API request failed");
        throw error;
      }
    );
    testSonarrConnection = async () => {
      try {
        logger.info(`Testing connection to Sonarr at ${SONARR_URL}`);
        const response = await sonarrClient.get("/api/v3/system/status");
        logger.info("Successfully connected to Sonarr API");
        logger.debug({ version: response.data.version }, "Sonarr version");
      } catch (error) {
        logger.error("Failed to connect to Sonarr API:", error.message);
        throw error;
      }
    };
    testSonarrConnection().catch((error) => {
      logger.error("Sonarr API connection test failed:", error.message);
    });
    router3.get("/unimported", async (req, res) => {
      try {
        logger.info("Fetching unimported shows from Sonarr");
        const response = await sonarrClient.get("/api/v3/series");
        const shows = response.data;
        const db = req.app.get("db");
        const importedShows = db.prepare("SELECT sonarr_id FROM shows").all();
        const importedIds = new Set(importedShows.map((show) => show.sonarr_id));
        const unimportedShows = shows.filter((show) => !importedIds.has(show.id));
        logger.info(`Found ${unimportedShows.length} unimported shows`);
        res.json(unimportedShows);
      } catch (error) {
        logger.error({ error: error.message }, "Failed to fetch unimported shows");
        res.status(500).json({
          error: "Failed to fetch unimported shows",
          details: error.message
        });
      }
    });
    router3.post("/import/:id", async (req, res) => {
      if (!req.app.get("db")) {
        logger.error("Database instance is not set on app");
        return res.status(500).json({ success: false, message: "Database not initialized" });
      }
      if (!logger) {
        logger.error("Logger is not set on app");
        return res.status(500).json({ success: false, message: "Logger not initialized" });
      }
      if (!sonarrClient) {
        logger.error("Sonarr client is not set on app");
        return res.status(500).json({ success: false, message: "Sonarr client not initialized" });
      }
      try {
        const showId = req.params.id;
        const wss = req.app.get("wss");
        const db = req.app.get("db");
        const result = await importShowById(showId, req, wss, db);
        if (result.success) {
          res.json({ success: true, message: "Show imported successfully" });
        } else {
          res.status(500).json({ error: result.error });
        }
      } catch (error) {
        res.status(500).json({ error: error.message });
      }
    });
    router3.post("/import", async (req, res) => {
      if (!req.app.get("db")) {
        logger.error("Database instance is not set on app");
        return res.status(500).json({ success: false, message: "Database not initialized" });
      }
      if (!logger) {
        logger.error("Logger is not set on app");
        return res.status(500).json({ success: false, message: "Logger not initialized" });
      }
      if (!sonarrClient) {
        logger.error("Sonarr client is not set on app");
        return res.status(500).json({ success: false, message: "Sonarr client not initialized" });
      }
      const { showIds } = req.body;
      if (!Array.isArray(showIds) || showIds.length === 0) {
        return res.status(400).json({ error: "showIds must be a non-empty array" });
      }
      const wss = req.app.get("wss");
      const db = req.app.get("db");
      const results = [];
      for (const showId of showIds) {
        const result = await importShowById(showId, req, wss, db);
        results.push(result);
      }
      res.json({
        importedCount: results.filter((r) => r.success).length,
        results
      });
    });
    sonarr_default = router3;
  }
});

// src/database/Schema.mjs
var STATEMENTS;
var init_Schema = __esm({
  "src/database/Schema.mjs"() {
    "use strict";
    STATEMENTS = [
      // tables
      `
    CREATE TABLE IF NOT EXISTS shows (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      sonarr_id INTEGER UNIQUE,
      path TEXT,
      overview TEXT,
      status TEXT,
      added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )`,
      `
    CREATE TABLE IF NOT EXISTS seasons (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      show_id INTEGER,
      season_number INTEGER,
      monitored BOOLEAN DEFAULT 1,
      FOREIGN KEY (show_id) REFERENCES shows(id) ON DELETE CASCADE,
      UNIQUE(show_id, season_number)
    )`,
      `
    CREATE TABLE IF NOT EXISTS episodes (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      season_id INTEGER,
      sonarr_episode_id INTEGER UNIQUE,
      episode_number INTEGER,
      title TEXT,
      monitored BOOLEAN DEFAULT 1,
      FOREIGN KEY (season_id) REFERENCES seasons(id) ON DELETE CASCADE
    )`,
      `
    CREATE TABLE IF NOT EXISTS episode_files (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      episode_id INTEGER,
      file_path TEXT,
      size INTEGER,
      quality TEXT,
      FOREIGN KEY (episode_id) REFERENCES episodes(id) ON DELETE CASCADE
    )`,
      `
    CREATE TABLE IF NOT EXISTS settings (
      key TEXT PRIMARY KEY,
      value TEXT
    )`,
      // indexes
      `CREATE INDEX IF NOT EXISTS idx_shows_title            ON shows(title COLLATE NOCASE)`,
      `CREATE INDEX IF NOT EXISTS idx_shows_sonarr_id        ON shows(sonarr_id)`,
      `CREATE INDEX IF NOT EXISTS idx_seasons_show_id        ON seasons(show_id)`,
      `CREATE INDEX IF NOT EXISTS idx_episodes_season_id     ON episodes(season_id)`,
      `CREATE INDEX IF NOT EXISTS idx_episodes_sonarr_ep_id  ON episodes(sonarr_episode_id)`
    ];
  }
});

// src/database/Auto_DB_Setup.js
import Database from "file:///home/d/cliprr/cliparr-node/node_modules/better-sqlite3/lib/index.js";
import path2 from "path";
import fs from "fs";
function getDatabaseSingleton(dbPath) {
  if (dbInstance) {
    return dbInstance;
  }
  logger.info({ dbPath }, "Initializing database");
  fs.mkdirSync(path2.dirname(dbPath), { recursive: true });
  dbInstance = new Database(dbPath);
  ["journal_mode = WAL", "busy_timeout = 5000"].forEach((setting) => dbInstance.pragma(setting));
  try {
    const init = dbInstance.transaction(() => {
      for (const stmt of STATEMENTS) {
        dbInstance.exec(stmt);
      }
      dbInstance.exec(
        "INSERT OR IGNORE INTO settings (key, value) VALUES ('import_mode', 'none');"
      );
      dbInstance.exec(
        "INSERT OR IGNORE INTO settings (key, value) VALUES ('polling_interval', '900');"
      );
    });
    init();
  } catch (err) {
    logger.error({ err }, "Schema initialization failed");
    throw err;
  }
  logger.info({ dbPath }, "Database initialized successfully");
  return dbInstance;
}
var dbInstance;
var init_Auto_DB_Setup = __esm({
  "src/database/Auto_DB_Setup.js"() {
    "use strict";
    init_logger();
    init_Schema();
    dbInstance = null;
  }
});

// src/database/Db_Operations.js
function getDb(dbPath = "data/cliparr.db") {
  return getDatabaseSingleton(dbPath);
}
function getImportMode(db) {
  try {
    const row = db.prepare("SELECT value FROM settings WHERE key = ?").get("import_mode");
    return row ? row.value : "none";
  } catch (error) {
    logger.error("Failed to get import mode:", error);
    throw error;
  }
}
function setImportMode(db, mode) {
  try {
    db.prepare("INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)").run("import_mode", mode);
  } catch (error) {
    logger.error("Failed to set import mode:", error);
    throw error;
  }
}
function getPollingInterval(db) {
  try {
    const row = db.prepare("SELECT value FROM settings WHERE key = ?").get("polling_interval");
    return row ? parseInt(row.value, 10) : 900;
  } catch (error) {
    logger.error("Failed to get polling interval:", error);
    throw error;
  }
}
function setPollingInterval(db, interval) {
  try {
    const validInterval = Math.max(60, Math.min(86400, interval));
    db.prepare("INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)").run("polling_interval", validInterval.toString());
    logger.info({ interval: validInterval }, "Polling interval updated");
  } catch (error) {
    logger.error("Failed to set polling interval:", error);
    throw error;
  }
}
var init_Db_Operations = __esm({
  "src/database/Db_Operations.js"() {
    "use strict";
    init_Auto_DB_Setup();
    init_logger();
  }
});

// src/routes/settings.js
import express4 from "file:///home/d/cliprr/cliparr-node/node_modules/express/index.js";
var router4, settings_default;
var init_settings = __esm({
  "src/routes/settings.js"() {
    "use strict";
    init_Db_Operations();
    init_logger();
    router4 = express4.Router();
    router4.get("/import-mode", (req, res) => {
      const db = getDb();
      try {
        const mode = getImportMode(db);
        res.json({ mode });
      } catch (error) {
        console.error("Failed to get import mode:", error);
        res.status(500).json({
          error: "Failed to get import mode",
          details: error && (error.stack || error.message || error)
        });
      }
    });
    router4.post("/import-mode", (req, res) => {
      const db = getDb();
      const { mode } = req.body;
      try {
        if (!mode || !["auto", "import", "none"].includes(mode)) {
          return res.status(400).json({ error: "Invalid import mode." });
        }
        setImportMode(db, mode);
        res.json({ status: "ok", mode });
      } catch (error) {
        console.error("Failed to set import mode:", error);
        res.status(500).json({
          error: "Failed to set import mode",
          details: error && (error.stack || error.message || error)
        });
      }
    });
    router4.get("/polling-interval", (req, res) => {
      const db = getDb();
      try {
        const interval = getPollingInterval(db);
        logger.info({ interval }, "GET polling interval");
        res.json({ interval });
      } catch (error) {
        logger.error("Failed to get polling interval:", error);
        res.status(500).json({
          error: "Failed to get polling interval",
          details: error && (error.stack || error.message || error)
        });
      }
    });
    router4.post("/polling-interval", (req, res) => {
      const db = getDb();
      const { interval } = req.body;
      logger.info({ interval }, "POST polling interval");
      try {
        if (!interval || isNaN(interval) || interval < 60 || interval > 86400) {
          return res.status(400).json({
            error: "Invalid polling interval. Must be between 60 and 86400 seconds."
          });
        }
        setPollingInterval(db, parseInt(interval, 10));
        const savedInterval = getPollingInterval(db);
        logger.info({ savedInterval }, "Saved polling interval");
        res.json({ status: "ok", interval: savedInterval });
      } catch (error) {
        logger.error("Failed to set polling interval:", error);
        res.status(500).json({
          error: "Failed to set polling interval",
          details: error && (error.stack || error.message || error)
        });
      }
    });
    settings_default = router4;
  }
});

// src/app.js
import express5 from "file:///home/d/cliprr/cliparr-node/node_modules/express/index.js";
function createApp({ db, logger: logger2, wss }) {
  const app = express5();
  app.set("db", db);
  app.set("logger", logger2);
  app.set("wss", wss);
  app.use(express5.json());
  app.use(cors);
  app.use("/health", health_default);
  app.use("/shows", shows_default);
  app.use("/sonarr", sonarr_default);
  app.use("/settings", settings_default);
  return app;
}
var init_app2 = __esm({
  "src/app.js"() {
    "use strict";
    init_cors();
    init_health();
    init_shows();
    init_sonarr();
    init_settings();
  }
});

// src/services/websocket.js
import { WebSocketServer } from "file:///home/d/cliprr/cliparr-node/node_modules/ws/wrapper.mjs";
function setupWebSocket(server, { path: path4 = "/ws", heartbeat = 3e4 } = {}) {
  wsServer = new WebSocketServer({ server, path: path4 });
  logger.info({ path: path4 }, "WebSocketServer listening");
  wsServer.on("connection", (ws) => {
    logger.debug("WebSocket client connected");
    ws.isAlive = true;
    ws.on("pong", () => ws.isAlive = true);
    ws.on("message", (raw) => {
      logger.debug({ raw }, "WS message");
      ws.send(JSON.stringify({
        type: "echo",
        data: raw.toString(),
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      }));
    });
    ws.on("error", (err) => {
      logger.error({ err }, "WebSocket error");
    });
    ws.on("close", () => {
      logger.debug("WebSocket disconnected");
    });
    ws.send(JSON.stringify({
      type: "welcome",
      message: "Connected to Cliparr backend",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    }));
  });
  const interval = setInterval(() => {
    wsServer.clients.forEach((ws) => {
      if (!ws.isAlive) {
        return ws.terminate();
      }
      ws.isAlive = false;
      ws.ping();
    });
  }, heartbeat);
  wsServer.on("close", () => clearInterval(interval));
  logger.info("WebSocket server initialized");
}
function getWebSocketServer() {
  return wsServer;
}
var wsServer;
var init_websocket = __esm({
  "src/services/websocket.js"() {
    "use strict";
    init_logger();
  }
});

// src/utils/isPortFree.js
import http from "http";
function isPortInUse(port) {
  return new Promise((resolve) => {
    const tester = http.createServer();
    tester.once("error", () => resolve(true));
    tester.once(
      "listening",
      () => tester.close(() => resolve(false))
    );
    tester.listen(port);
  });
}
var init_isPortFree = __esm({
  "src/utils/isPortFree.js"() {
    "use strict";
  }
});

// src/integration/server.js
var server_exports = {};
__export(server_exports, {
  startServer: () => startServer
});
import http2 from "http";
async function startServer() {
  if (serverInstance) {
    return serverInstance;
  }
  if (await isPortInUse(config_default.port)) {
    throw new Error(`Port ${config_default.port} in use`);
  }
  dbInstance2 = getDatabaseSingleton(config_default.db.path);
  const app = createApp({ db: dbInstance2, logger, wss: null });
  serverInstance = http2.createServer(app);
  setupWebSocket(serverInstance, config_default.ws);
  app.set("wss", getWebSocketServer());
  serverInstance.listen(
    config_default.port,
    config_default.host,
    () => logger.info(`Listening on ${config_default.host}:${config_default.port}`)
  );
  return serverInstance;
}
var serverInstance, dbInstance2;
var init_server = __esm({
  "src/integration/server.js"() {
    "use strict";
    init_logger();
    init_config();
    init_app2();
    init_websocket();
    init_Auto_DB_Setup();
    init_isPortFree();
  }
});

// vite.config.ts
import { defineConfig } from "file:///home/d/cliprr/cliparr-node/node_modules/vite/dist/node/index.js";
import react from "file:///home/d/cliprr/cliparr-node/node_modules/@vitejs/plugin-react/dist/index.mjs";
import path3 from "path";
import { fileURLToPath } from "url";
var __vite_injected_original_import_meta_url = "file:///home/d/cliprr/cliparr-node/vite.config.ts";
var __dirname2 = path3.dirname(fileURLToPath(__vite_injected_original_import_meta_url));
var vite_config_default = defineConfig({
  plugins: [
    react(),
    // Plugin to start backend server alongside Vite
    {
      name: "backend-integration",
      configureServer() {
        setTimeout(async () => {
          try {
            const { startServer: startServer2 } = await Promise.resolve().then(() => (init_server(), server_exports));
            await startServer2();
            console.log("\u2705 Backend server started successfully");
          } catch (err) {
            console.error("\u274C Failed to start backend server:", err);
          }
        }, 1e3);
      }
    }
  ],
  server: {
    host: "0.0.0.0",
    port: 8484,
    // Frontend port
    watch: {
      ignored: ["**/src/database/data/**"]
      // Ignore DB changes
    }
  },
  build: {
    outDir: "dist",
    sourcemap: true
  },
  resolve: {
    alias: {
      "@": path3.resolve(__dirname2, "./src")
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
